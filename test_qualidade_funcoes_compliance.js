// VERSION: v1.0.0 | DATE: 2024-12-19 | AUTHOR: VeloHub Development Team
// TESTE DE COMPLIANCE - ENDPOINTS QUALIDADE FUN√á√ïES

const axios = require('axios');

// Configura√ß√£o do teste
const BASE_URL = 'http://localhost:3000/api/qualidade';
const testResults = {
  passed: 0,
  failed: 0,
  tests: []
};

// Fun√ß√£o para executar teste
async function runTest(testName, testFunction) {
  try {
    console.log(`\nüß™ [TESTE] ${testName}`);
    await testFunction();
    testResults.passed++;
    testResults.tests.push({ name: testName, status: 'PASSED' });
    console.log(`‚úÖ [TESTE] ${testName} - PASSOU`);
  } catch (error) {
    testResults.failed++;
    testResults.tests.push({ name: testName, status: 'FAILED', error: error.message });
    console.log(`‚ùå [TESTE] ${testName} - FALHOU: ${error.message}`);
  }
}

// Teste 1: GET /api/qualidade/funcoes - Listar fun√ß√µes
async function testGetFuncoes() {
  const response = await axios.get(`${BASE_URL}/funcoes`);
  
  if (!response.data.success) {
    throw new Error('Response success deve ser true');
  }
  
  if (!Array.isArray(response.data.data)) {
    throw new Error('Response data deve ser um array');
  }
  
  if (typeof response.data.count !== 'number') {
    throw new Error('Response count deve ser um n√∫mero');
  }
  
  console.log(`   üìä Fun√ß√µes encontradas: ${response.data.count}`);
}

// Teste 2: POST /api/qualidade/funcoes - Criar fun√ß√£o
async function testPostFuncoes() {
  const testData = {
    funcao: `Teste Fun√ß√£o ${Date.now()}`,
    descricao: 'Fun√ß√£o criada para teste de compliance'
  };
  
  const response = await axios.post(`${BASE_URL}/funcoes`, testData);
  
  if (!response.data.success) {
    throw new Error('Response success deve ser true');
  }
  
  if (!response.data.data._id) {
    throw new Error('Response data deve conter _id');
  }
  
  if (response.data.data.funcao !== testData.funcao) {
    throw new Error('Fun√ß√£o criada n√£o confere com dados enviados');
  }
  
  console.log(`   üìù Fun√ß√£o criada: ${response.data.data.funcao} (ID: ${response.data.data._id})`);
  
  // Retornar ID para testes subsequentes
  return response.data.data._id;
}

// Teste 3: POST /api/qualidade/funcoes - Valida√ß√£o de duplica√ß√£o
async function testPostFuncoesDuplicacao() {
  const testData = {
    funcao: 'Fun√ß√£o Duplicada Teste',
    descricao: 'Teste de duplica√ß√£o'
  };
  
  // Criar primeira fun√ß√£o
  await axios.post(`${BASE_URL}/funcoes`, testData);
  
  try {
    // Tentar criar fun√ß√£o duplicada
    await axios.post(`${BASE_URL}/funcoes`, testData);
    throw new Error('Deveria ter retornado erro de duplica√ß√£o');
  } catch (error) {
    if (error.response && error.response.status === 409) {
      if (!error.response.data.success) {
        throw new Error('Response success deve ser false para erro de duplica√ß√£o');
      }
      if (error.response.data.error !== 'Fun√ß√£o j√° existe') {
        throw new Error('Mensagem de erro de duplica√ß√£o incorreta');
      }
      console.log('   ‚úÖ Valida√ß√£o de duplica√ß√£o funcionando corretamente');
    } else {
      throw error;
    }
  }
}

// Teste 4: PUT /api/qualidade/funcoes/:id - Atualizar fun√ß√£o
async function testPutFuncoes() {
  // Primeiro criar uma fun√ß√£o
  const createData = {
    funcao: `Fun√ß√£o para Atualizar ${Date.now()}`,
    descricao: 'Fun√ß√£o original'
  };
  
  const createResponse = await axios.post(`${BASE_URL}/funcoes`, createData);
  const funcaoId = createResponse.data.data._id;
  
  // Atualizar fun√ß√£o
  const updateData = {
    funcao: `Fun√ß√£o Atualizada ${Date.now()}`,
    descricao: 'Fun√ß√£o atualizada para teste'
  };
  
  const response = await axios.put(`${BASE_URL}/funcoes/${funcaoId}`, updateData);
  
  if (!response.data.success) {
    throw new Error('Response success deve ser true');
  }
  
  if (response.data.data.funcao !== updateData.funcao) {
    throw new Error('Fun√ß√£o n√£o foi atualizada corretamente');
  }
  
  console.log(`   üîÑ Fun√ß√£o atualizada: ${response.data.data.funcao}`);
  
  return funcaoId;
}

// Teste 5: DELETE /api/qualidade/funcoes/:id - Deletar fun√ß√£o
async function testDeleteFuncoes() {
  // Primeiro criar uma fun√ß√£o
  const createData = {
    funcao: `Fun√ß√£o para Deletar ${Date.now()}`,
    descricao: 'Fun√ß√£o que ser√° deletada'
  };
  
  const createResponse = await axios.post(`${BASE_URL}/funcoes`, createData);
  const funcaoId = createResponse.data.data._id;
  
  // Deletar fun√ß√£o
  const response = await axios.delete(`${BASE_URL}/funcoes/${funcaoId}`);
  
  if (!response.data.success) {
    throw new Error('Response success deve ser true');
  }
  
  if (response.data.message !== 'Fun√ß√£o deletada com sucesso') {
    throw new Error('Mensagem de sucesso incorreta');
  }
  
  console.log(`   üóëÔ∏è Fun√ß√£o deletada com sucesso (ID: ${funcaoId})`);
}

// Teste 6: Valida√ß√£o de campos obrigat√≥rios
async function testValidacaoCampos() {
  try {
    // Tentar criar fun√ß√£o sem nome
    await axios.post(`${BASE_URL}/funcoes`, { descricao: 'Sem nome' });
    throw new Error('Deveria ter retornado erro de valida√ß√£o');
  } catch (error) {
    if (error.response && error.response.status === 400) {
      if (!error.response.data.success) {
        throw new Error('Response success deve ser false para erro de valida√ß√£o');
      }
      if (error.response.data.error !== 'Nome da fun√ß√£o √© obrigat√≥rio') {
        throw new Error('Mensagem de erro de valida√ß√£o incorreta');
      }
      console.log('   ‚úÖ Valida√ß√£o de campos obrigat√≥rios funcionando');
    } else {
      throw error;
    }
  }
}

// Teste 7: Valida√ß√£o de ObjectId inv√°lido
async function testObjectIdInvalido() {
  try {
    await axios.put(`${BASE_URL}/funcoes/invalid-id`, { funcao: 'Teste' });
    throw new Error('Deveria ter retornado erro de ObjectId inv√°lido');
  } catch (error) {
    if (error.response && error.response.status === 400) {
      if (error.response.data.error !== 'ID inv√°lido') {
        throw new Error('Mensagem de erro de ObjectId incorreta');
      }
      console.log('   ‚úÖ Valida√ß√£o de ObjectId funcionando');
    } else {
      throw error;
    }
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ [TESTE] Iniciando testes de compliance - Endpoints Qualidade Fun√ß√µes');
  console.log('üöÄ [TESTE] Base URL:', BASE_URL);
  
  await runTest('GET /api/qualidade/funcoes - Listar fun√ß√µes', testGetFuncoes);
  await runTest('POST /api/qualidade/funcoes - Criar fun√ß√£o', testPostFuncoes);
  await runTest('POST /api/qualidade/funcoes - Valida√ß√£o duplica√ß√£o', testPostFuncoesDuplicacao);
  await runTest('PUT /api/qualidade/funcoes/:id - Atualizar fun√ß√£o', testPutFuncoes);
  await runTest('DELETE /api/qualidade/funcoes/:id - Deletar fun√ß√£o', testDeleteFuncoes);
  await runTest('Valida√ß√£o de campos obrigat√≥rios', testValidacaoCampos);
  await runTest('Valida√ß√£o de ObjectId inv√°lido', testObjectIdInvalido);
  
  // Relat√≥rio final
  console.log('\nüìä [RELAT√ìRIO] Resultados dos testes:');
  console.log(`‚úÖ Testes passaram: ${testResults.passed}`);
  console.log(`‚ùå Testes falharam: ${testResults.failed}`);
  console.log(`üìà Taxa de sucesso: ${((testResults.passed / (testResults.passed + testResults.failed)) * 100).toFixed(1)}%`);
  
  console.log('\nüìã [DETALHES] Testes executados:');
  testResults.tests.forEach(test => {
    const status = test.status === 'PASSED' ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${test.name}`);
    if (test.error) {
      console.log(`      Erro: ${test.error}`);
    }
  });
  
  if (testResults.failed > 0) {
    console.log('\n‚ùå [RESULTADO] Alguns testes falharam. Verifique a implementa√ß√£o.');
    process.exit(1);
  } else {
    console.log('\n‚úÖ [RESULTADO] Todos os testes passaram! Compliance total confirmado.');
    process.exit(0);
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('‚ùå [ERRO] Falha na execu√ß√£o dos testes:', error.message);
    process.exit(1);
  });
}

module.exports = { runAllTests, testResults };
