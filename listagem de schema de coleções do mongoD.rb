listagem de schema de cole√ß√µes do mongoDB
  <!-- VERSION: v1.15.0 | DATE: 2025-01-30 | AUTHOR: VeloHub Development Team -->
  
    üóÑÔ∏è Database Principal: console_conteudo
  
  //schema console_conteudo.Artigos
  {
  _id: ObjectId,
  tag: String,                    // Tag do artigo
  categoria_id: String,           // ID da categoria
  categoria_titulo: String,       // T√≠tulo da categoria
  artigo_titulo: String,          // T√≠tulo do artigo
  artigo_conteudo: String,        // Conte√∫do do artigo (FORMATADO - ver padr√µes abaixo)
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
  //schema console_conteudo.Bot_perguntas
  {
  _id: ObjectId,
  pergunta: String,               // Pergunta do bot
  resposta: String,               // Resposta do bot (FORMATADA - ver padr√µes abaixo)
  palavrasChave: String,          // Palavras-chave
  sinonimos: String,              // Sin√¥nimos
  tabulacao: String,              // Tabula√ß√£o
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
  //schema console_conteudo.Velonews
  {
  _id: ObjectId,
  titulo: String,                 // T√≠tulo da not√≠cia
  conteudo: String,               // Conte√∫do da not√≠cia
  isCritical: Boolean,            // Se √© not√≠cia cr√≠tica
  solved: Boolean,                // Se a not√≠cia foi resolvida (default: false)
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
      
  //schema console_conteudo.user_activity
  {
  _id: ObjectId,
  colaboradorNome: String,           // Nome do colaborador
  action: String,                    // Tipo de a√ß√£o (question_asked, feedback_given, article_viewed, ai_button_used)
  details: {                         // Detalhes espec√≠ficos da a√ß√£o
    question: String,                // Pergunta feita (para question_asked)
    feedbackType: String,            // Tipo de feedback (positive/negative)
    messageId: String,               // ID da mensagem (para feedback)
    articleId: String,               // ID do artigo (para article_viewed)
    articleTitle: String,            // T√≠tulo do artigo
    formatType: String               // Tipo de formata√ß√£o (whatsapp/email)
  },
  sessionId: String,                 // ID da sess√£o
  source: String,                    // Fonte da a√ß√£o (chatbot, ai_button, etc.)
  createdAt: Date,                   // Data de cria√ß√£o
  updatedAt: Date                    // Data de atualiza√ß√£o
  }
  
  //schema console_conteudo.hub_sessions
  {
  _id: ObjectId,
  colaboradorNome: String,           // Nome do colaborador
  userEmail: String,                 // Email do usu√°rio
  sessionId: String,                 // ID √∫nico da sess√£o (UUID)
  ipAddress: String,                 // IP do usu√°rio (opcional)
  userAgent: String,                 // Navegador/dispositivo (opcional)
  isActive: Boolean,                 // Se a sess√£o est√° ativa
  loginTimestamp: Date,              // Data/hora do login
  logoutTimestamp: Date,             // Data/hora do logout (null se ativo)
  createdAt: Date,                   // Data de cria√ß√£o
  updatedAt: Date                    // Data de atualiza√ß√£o
  }
  
  //schema console_conteudo.velonews_acknowledgments
  {
  _id: ObjectId,
  newsId: ObjectId,              // Refer√™ncia √† not√≠cia (Velonews._id)
  colaboradorNome: String,       // Nome do colaborador que confirmou
  userEmail: String,             // Email do usu√°rio
  acknowledgedAt: Date,          // Data/hora da confirma√ß√£o
  createdAt: Date,               // Data de cria√ß√£o
  updatedAt: Date                // Data de atualiza√ß√£o
  }
  
  //schema console_conteudo.bot_feedback
  {
  _id: ObjectId,
  colaboradorNome: String,           // Nome do colaborador que deu o feedback
  action: String,                    // Tipo de a√ß√£o (feedback_given)
  messageId: String,                 // ID da mensagem que recebeu o feedback
  sessionId: String,                 // ID da sess√£o
  source: String,                    // Fonte da resposta (chatbot, ai_button, clarification, etc.)
  details: {                         // Detalhes espec√≠ficos do feedback
    feedbackType: String,            // Tipo de feedback (positive/negative)
    comment: String,                 // Coment√°rio opcional do usu√°rio
    question: String,                // Pergunta original que gerou a resposta
    answer: String,                  // Resposta do bot que recebeu o feedback
    aiProvider: String,              // Provedor da IA (OpenAI, Gemini, null)
    responseSource: String           // Origem da resposta (bot_perguntas, ai, clarification, etc.)
  },
  createdAt: Date,                   // Data de cria√ß√£o
  updatedAt: Date                    // Data de atualiza√ß√£o
  }
  

  üóÑÔ∏è Database: console_chamados
  
    // schema DB console_chamados.tk_gest√£o
  // Tickets de gest√£o, RH e financeiro, facilities
  {
  _id: String,                    // ID personalizado com prefixo TKG- + numera√ß√£o autom√°tica (ex: TKG-000001)
  _userEmail: String,             // Email do usu√°rio (obtido via SSO) - MOVIDO para 2¬™ posi√ß√£o
  _genero: String,                // G√™nero do ticket (Gest√£o, RH e Financeiro, Facilities)
  _tipo: String,                  // Tipo do ticket (solicita√ß√£o, agendamento, notifica√ß√£o, etc.)
  _direcionamento: String,        // Direcionamento (supervisor, gestor, backoffice, RH, Financeiro, etc.)
  _corpo: [                       // Array de mensagens do ticket (ALTERADO de String para Array)
    {
      autor: String,              // "user" | "admin"
      userName: String,           // Nome obtido do SSO
      timestamp: Date,            // Data/hora da mensagem
      mensagem: String            // Conte√∫do da mensagem
    }
  ],
  _atribuido: string,             // Atribu√≠do a (opcional)
  _processo: string,              // Processo (opcional)
  _processamento: String,         // Processamento (aprova√ß√£o do gestor, consulta viabilidade, processamento) - OPCIONAL
  _statusHub: String,             // Status para usu√°rio (novo, aberto, em espera pendente, resolvido)
  _statusConsole: String,         // Status para gestor (novo, aberto, em espera, pendente, resolvido)
  _lastUpdatedBy: String,         // Quem atualizou por √∫ltimo (user, admin)
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  

  // schema DB console_chamados.tk_conteudos
  // Tickets de conte√∫do (artigos, processos, roteiros, treinamentos, funcionalidades, recursos)
  {
  _id: String,                    // ID personalizado com prefixo TKC- + numera√ß√£o autom√°tica (ex: TKC-000001)
  _userEmail: String,             // Email do usu√°rio (obtido via SSO) - MOVIDO para 2¬™ posi√ß√£o
  _assunto: String,                // Assunto do ticket
  _genero: String,                // G√™nero do ticket (Artigo, Processo, Roteiro, Treinamento, Funcionalidade, Recurso Adicional)
  _tipo: String,                  // Tipo do ticket (assunto, produto, ambiente, tipo_recurso, etc.)
  _corpo: [                       // Array de mensagens do ticket (ALTERADO de String para Array)
    {
      autor: String,              // "user" | "admin"
      userName: String,           // Nome obtido do SSO
      timestamp: Date,            // Data/hora da mensagem
      mensagem: String            // Conte√∫do da mensagem
    }
  ],
  _obs: String,                   // Observa√ß√µes (opcional)
  _atribuido: string,             // Atribu√≠do a (opcional)
  _processo: string,              // Processo (opcional)
  _processamento: String,         // Processamento (aprova√ß√£o do gestor, consulta viabilidade, processamento) - OPCIONAL
  _statusHub: String,             // Status para usu√°rio (novo, aberto, em espera pendente, resolvido)
  _statusConsole: String,         // Status para gestor (novo, aberto, em espera, pendente, resolvido)
  _lastUpdatedBy: String,         // Quem atualizou por √∫ltimo (user, admin)
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
  // ===== MAPEAMENTO DE FORMUL√ÅRIOS PARA SCHEMAS =====
  
  // FORMUL√ÅRIOS TK_CONTEUDOS (6 G√™neros):
  // 1. Artigo: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  // 2. Processo: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  // 3. Roteiro: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  // 4. Treinamento: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  // 5. Funcionalidade: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  // 6. Recurso Adicional: assunto ‚Üí _assunto, tipo ‚Üí _tipo, descri√ß√£o ‚Üí _corpo, ocorr√™ncia ‚Üí _obs
  
  // FORMUL√ÅRIOS TK_GEST√ÉO (3 G√™neros):
  // 1. Gest√£o: tipo ‚Üí _tipo, direcionado ‚Üí _direcionamento, mensagem ‚Üí _corpo
  // 2. RH e Financeiro: tipo ‚Üí _tipo, setor ‚Üí _direcionamento, mensagem ‚Üí _corpo
  // 3. Facilities: tipo ‚Üí _tipo, categoria ‚Üí _direcionamento, mensagem ‚Üí _corpo
  
  
  
  üóÑÔ∏è Database: console_config
  
  // Schema Config
  {
  _id: ObjectId,
  _userMail: String,              // Email do usu√°rio
  _userId: String,                // ID do usu√°rio
  _userRole: String,              // Papel do usu√°rio
  _userClearance: {               // Permiss√µes do usu√°rio
    artigos: Boolean,
    velonews: Boolean,
    botPerguntas: Boolean,
    botAnalises: Boolean,         // Permiss√£o para Bot An√°lises
    hubAnalises: Boolean,         // Permiss√£o para Hub An√°lises
    chamadosInternos: Boolean,
    igp: Boolean,
    qualidade: Boolean,
    capacity: Boolean,
    config: Boolean,
    servicos: Boolean
  },
  _userTickets: {                 // Tipos de tickets
    artigos: Boolean,
    processos: Boolean,
    roteiros: Boolean,
    treinamentos: Boolean,
    funcionalidades: Boolean,
    recursos: Boolean,
    gestao: Boolean,
    rhFin: Boolean,
    facilities: Boolean
  },
  _funcoesAdministrativas: {      // Fun√ß√µes administrativas
    avaliador: Boolean,           // Se √© avaliador no m√≥dulo Qualidade
    auditoria: Boolean,           // Se tem permiss√£o para auditoria
    relatoriosGestao: Boolean     // Se tem permiss√£o para relat√≥rios de gest√£o
  },
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
   //schema console_config.module_status
  {
  _id: "status",
  _trabalhador: String,    // Status do Cr√©dito Trabalhador
  _pessoal: String,        // Status do Cr√©dito Pessoal  
  _antecipacao: String,    // Status da Antecipa√ß√£o
  _pgtoAntecip: String,    // Status do Pagamento Antecipado
  _irpf: String,           // Status do M√≥dulo IRPF
  _seguro: String,         // Status do M√≥dulo Seguro
  createdAt: Date,         // Data de cria√ß√£o
  updatedAt: Date          // Data de atualiza√ß√£o
  }
  
  
  //üóÑÔ∏è Schema de Ping de Usu√°rio
  // de login ou refresh
  {
  _userId: String,                // ID do usu√°rio
  _collectionId: String,          // ID da collection
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
  üóÑÔ∏è Database console_analises
  9. schema console_analises.qualidade_avaliacoes
{
_id: ObjectId,
colaboradorNome: String,        // Nome do colaborador
avaliador: String,              // Avaliador
mes: String,                    // M√™s da avalia√ß√£o
ano: Number,                    // Ano da avalia√ß√£o
saudacaoAdequada: Boolean,      // Crit√©rio de avalia√ß√£o
escutaAtiva: Boolean,           // Crit√©rio de avalia√ß√£o
clarezaObjetividade: Boolean,   // Crit√©rio de avalia√ß√£o (NOVO)
resolucaoQuestao: Boolean,      // Crit√©rio de avalia√ß√£o
dominioAssunto: Boolean,        // Crit√©rio de avalia√ß√£o (NOVO)
empatiaCordialidade: Boolean,   // Crit√©rio de avalia√ß√£o
direcionouPesquisa: Boolean,    // Crit√©rio de avalia√ß√£o
procedimentoIncorreto: Boolean, // Crit√©rio de avalia√ß√£o
encerramentoBrusco: Boolean,    // Crit√©rio de avalia√ß√£o
pontuacaoTotal: Number,         // Pontua√ß√£o total
observacoes: String,            // Observa√ß√µes da avalia√ß√£o
dataLigacao: Date,              // Data da liga√ß√£o
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date,                // Data de atualiza√ß√£o
}

  //schema console_analises.qualidade_funcionarios
  {
  _id: ObjectId,
  colaboradorNome: String,        // Nome completo (padronizado)
  dataAniversario: Date,          // Data de anivers√°rio
  empresa: String,                // Empresa
  dataContratado: Date,           // Data de contrata√ß√£o
  telefone: String,               // Telefone
  atuacao: [ObjectId],            // Array de refer√™ncias para qualidade_funcoes
  escala: String,                 // Escala
  acessos: [{                     // Array de acessos
    sistema: String,
    perfil: String,
    observacoes: String,
    updatedAt: Date
  }],
  desligado: Boolean,             // Se foi desligado
  dataDesligamento: Date,         // Data de desligamento
  afastado: Boolean,              // Se est√° afastado
  dataAfastamento: Date,          // Data de afastamento
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o
  }
  
  //schema console_analises.qualidade_avaliacoes_gpt
  {
  _id: ObjectId,
  avaliacao_id: ObjectId,         // Refer√™ncia √† avalia√ß√£o original (padronizado)
  analiseGPT: String,             // An√°lise completa do GPT
  pontuacaoGPT: Number,           // Pontua√ß√£o calculada pelo GPT (0-100)
  criteriosGPT: {                 // Crit√©rios avaliados pelo GPT
    saudacaoAdequada: Boolean,
    escutaAtiva: Boolean,
    clarezaObjetividade: Boolean,  // NOVO crit√©rio
    resolucaoQuestao: Boolean,
    dominioAssunto: Boolean,       // NOVO crit√©rio
    empatiaCordialidade: Boolean,
    direcionouPesquisa: Boolean,
    procedimentoIncorreto: Boolean,
    encerramentoBrusco: Boolean
  },
  confianca: Number,              // N√≠vel de confian√ßa (0-100)
  palavrasCriticas: [String],     // Palavras-chave cr√≠ticas mencionadas
  calculoDetalhado: [String],     // Explica√ß√£o do c√°lculo da pontua√ß√£o
  createdAt: Date,                // Data de cria√ß√£o
  updatedAt: Date                 // Data de atualiza√ß√£o (padronizado)
  }
  
  //schema console_analises.qualidade_funcoes
  {
  _id: ObjectId,
  funcao: String,              // Nome da fun√ß√£o (ex: "Atendimento", "Suporte T√©cnico")
  descricao: String,           // Descri√ß√£o opcional da fun√ß√£o
  createdAt: Date,             // Data de cria√ß√£o
  updatedAt: Date              // Data de atualiza√ß√£o
  }
  
  //schema console_analises.faq_bot
  // 
  {
  _id: "faq",                      // ID fixo para identifica√ß√£o no backend
  dados: [String],                 // Array com as 10 perguntas mais feitas (apenas os textos)
  totalPerguntas: Number,          // Total de perguntas no per√≠odo
  updatedAt: Date                  // Data de atualiza√ß√£o (controle de versionamento)
  }
  
  // ========================================
  // üìã PADR√ïES DE FORMATA√á√ÉO DE CONTE√öDO
  // ========================================
  // VERSION: v1.0.0 | DATE: 2024-12-19 | AUTHOR: VeloHub Development Team
  
  /*
  üéØ PADR√ïES DE FORMATA√á√ÉO PARA CONTE√öDO (Bot_perguntas.resposta e Artigos.artigo_conteudo)
  
  1. QUEBRAS DE LINHA:
     - Usar \n para quebras de linha simples
     - Usar \n\n para separa√ß√£o de par√°grafos
     - Evitar mais de 2 \n consecutivos
  
  2. LISTAS NUMERADAS:
     - Formato: "1. Item\n2. Item\n3. Item"
     - Sempre usar n√∫meros seguidos de ponto e espa√ßo
     - Uma quebra de linha entre cada item
  
  3. LISTAS COM BULLETS:
     - Formato: "‚Ä¢ Item\n‚Ä¢ Item\n‚Ä¢ Item"
     - Usar bullet Unicode (‚Ä¢) seguido de espa√ßo
     - Uma quebra de linha entre cada item
  
  4. NEGRITO E IT√ÅLICO:
     - Negrito: **texto** (markdown)
     - It√°lico: *texto* (markdown)
     - Evitar HTML tags (<b>, <i>, <strong>, <em>)
  
  5. LINKS:
     - Formato: [texto do link](URL)
     - Sempre incluir texto descritivo
     - URLs completas com http/https
  
  6. CARACTERES ESPECIAIS:
     - Usar encoding UTF-8 correto
     - Acentos: √°, √©, √≠, √≥, √∫, √£, √µ, √ß
     - S√≠mbolos: R$, %, ¬∫, ¬™, etc.
  
  7. ESTRUTURA DE PAR√ÅGRAFOS:
     - M√°ximo 3-4 linhas por par√°grafo
     - Usar \n\n para separar se√ß√µes
     - Evitar blocos de texto muito longos
  
  8. FORMATA√á√ÉO DE C√ìDIGOS/COMANDOS:
     - Usar `c√≥digo` para inline
     - Usar ```c√≥digo``` para blocos
     - Especificar linguagem quando relevante
  
  9. FORMATA√á√ÉO DE DATAS:
     - Formato: DD/MM/AAAA
     - Hor√°rios: HH:MM (24h)
     - Evitar formatos amb√≠guos
  
  10. FORMATA√á√ÉO DE VALORES:
      - Moeda: R$ 1.234,56
      - Percentuais: 15%
      - N√∫meros grandes: 1.000.000
  
  EXEMPLOS DE FORMATA√á√ÉO CORRETA:
  
  ‚úÖ BOM:
  "Para solicitar o cr√©dito trabalhador:
  
  1. Acesse o portal VeloHub
  2. Preencha os dados pessoais
  3. Envie os documentos necess√°rios
  
  **Importante:** O processo pode levar at√© 5 dias √∫teis.
  
  Para mais informa√ß√µes, consulte: [Manual do Cr√©dito](https://manual.velohub.com)"
  
  ‚ùå RUIM:
  "Para solicitar o cr√©dito trabalhador voc√™ deve acessar o portal VeloHub preencher os dados pessoais enviar os documentos necess√°rios o processo pode levar at√© 5 dias √∫teis para mais informa√ß√µes consulte o manual"
  
  APLICA√á√ÉO:
  - Bot_perguntas.resposta: Sempre formatar seguindo estes padr√µes
  - Artigos.artigo_conteudo: Sempre formatar seguindo estes padr√µes
  - Backend: Aplicar formata√ß√£o autom√°tica se conte√∫do n√£o estiver formatado
  - Frontend: Renderizar formata√ß√£o markdown corretamente
  */
  npm 